#ifndef _masterBPS_definitions_JF
#define _masterBPS_definitions_JF
                
///////////////////////////////////////////////////
//LED configuration
//OLD CONFIG
//#define led1	LATCbits.LATC0	//1 for on 0 for off
//#define led2	LATAbits.LATA5	//1 for on 0 for off

#define led_overv   LATDbits.LATD4
#define led_underv  LATDbits.LATD5
#define led_overt   LATDbits.LATD6
#define led_timeout LATDbits.LATD7
#define led1        LATBbits.LATB4
#define led_overi   LATBbits.LATB5


#define LEDON	1
#define LEDOFF	0
//TRISC &= 0b11111110;//RC0 is the LED (set to output (0))
/////////////////////////////////////////////////////
//DIP Switch Configuration

#define switch1 PORTDbits.RD0
#define switch2 PORTDbits.RD1
#define switch3 PORTDbits.RD2
#define switch4 PORTCbits.RC2
#define switch5 PORTCbits.RC1
#define switch6 PORTCbits.RC0
#define button1 PORTCbits.RC5
#define interrupt1 PORTBbits.RB0


//OLD CONFIG
//#define switch1 PORTDbits.RD2
//#define switch2 PORTDbits.RD3
//#define switch3 PORTCbits.RC5
//#define switch4 PORTDbits.RD4
//#define switch5 PORTDbits.RD5
//#define switch6 PORTDbits.RD6
#define SWITCHOFF 1
#define SWITCHON 0
#define BUTTONOFF 0
#define BUTTONON 1

////////////////////////////////////////////////////
//current sensor stuff
//assuming current sensor is on AN0
//external voltage referencing (RA2 -> AN2 -> VREF-) (RA3 -> AN3 -> VREF+)
#define VREF_PLUS	4.5
#define VREF_MINUS	0

////////////////////////////////////////////////////
//relay configuration
//old config
//#define	precharge	LATCbits.LATC1
//#define	mainrelay	LATCbits.LATC3
//#define	arrayrelay	LATCbits.LATC2

#define precharge   LATEbits.LATE0
#define arrayrelay  LATAbits.LATA5
#define mainrelay   LATAbits.LATA4

#define	RELAYON	1
#define	RELAYOFF	0

#define	PRECHARGETIME	600000
#define MAINWAITTIME	300000

//TRISC &= 0b11110001;//RC1,2,3 are the relay drive lines (set to output (0))


////////////////////////////////////////////////////
//Interrupt configuration

//right now I am not planning on any interrupts but I wanted to make it easy to change that later
//	If interrups are desired then change INTERRUPTENABLE to 1
#define GLOBALINTERRUPTS	INTCONbits.GIE
#define INTERRUPTENABLE	1
#define INTERRUPTDISABLE	0



////////////////////////////////////////////////////
//CAN message configuration
//CAN message identifiers are 11 bits long
#define	MASK_BPS_SLAVE	0b00011111100
#define	MASK_BPS_READING	0b00000000001
#define MASK_ENERGY         0b01000000000
#define	MASK_CBS         	0b00000000010
#define MASK_BPS_MASTER	0b00100000000
#define MASK_BPS_SLAVE_READING	0b00011111101
#define MASK_MASTER_SHUTDOWN	0b00100000011

#define MPPT_CONTROLLER	0b01111111111

#define SLAVE_BIT_OFFSET	2	//this is the number of bits right of where the slave address starts

#define	BALANCEON	0xFF
#define	BALANCEOFF	0x00
#define MODULE_ID_NULL 255


////////////////////////////////////////////////////
//BPS management Config options
#define BPSSENDRATE	50
#define	SLAVETIMEOUT	150
#define	CHECKINTIMEOUT	200
#define	RECEIVETIMEOUT	200
//current reading period in multiples of .7989
#define CURRENT_DELAY_MULTIPLIER 1
#define BATTERY_INTERNAL_RESISTANCE_MILLIOHMS 5
//CBS constants
#define CBS_CUTOFF_OFFSET 2500
// CBS interval = multiplier * .189787
// 120 is roughly 33 seconds
#define CBS_DELAY_MULTIPLIER 120

//assume around 200mV voltage increase to compensate for CBS
#define CBS_VOLTAGE_DROP 2000

//battery voltage cutoff points (in Volts * 10000)
#define	CUTOFF_VOLTAGE_HIGH	36490
#define	CUTOFF_VOLTAGE_LOW	26510
//#define	CUTOFF_VOLTAGE_LOW	0
//#define	CUTOFF_VOLTAGE_HIGH	50000

//battery current cutoff points (in milli-Amps)
#define	CUTOFF_CURRENT_HIGH	 80000
#define	CUTOFF_CURRENT_LOW	(-40000)

//battery temperature cutoff point (in Celcius)
#define CUTOFF_TEMP_HIGH	        45
#define CUTOFF_TEMP_HIGH_DISCHARGE	60

//array cutoff point (in Volts * 10000)
#define ARRAY_CUTON		        34500
#define ARRAY_CUTOFF	        35500
#define ARRAY_CUTON_CURRENT		 3000
#define ARRAY_CUTOFF_CURRENT	 1000
#define ARRAY_CUTOFF_TEMP	       43

//ERROR CONFIG OPTIONS
#define	NOERR	0
#define	BPSERR	1
#define	CURRENTERR	2
#define	SHUTDOWN	3
#define TIMEOUTERR 4
#define MSGERR 5
//locations of the items in EEPROM remember 1 int = 2 char = 2 bytes
#define LOCATION_ERRTYPE	0x00
#define LOCATION_INTVAL0	0x01
#define LOCATION_INTVAL1	0x02
#define LOCATION_CHARVAL	0x03	

//=====================================================
enum SEGMODE {NORMAL,VMAX,VMIN,TMAX,CURRENT,ERROR,SLAVE};

struct BAT_DATA {
	unsigned int voltage[48];
	unsigned char temperature[48];
	long int amphours;
	enum SEGMODE segmode; 
    long int current;
       long int zerocurrent;
    unsigned int vmax;
    unsigned int vmin;
    unsigned char tmax;
    unsigned char tmin;
       unsigned char cbsmod;
    unsigned char moduleCount;    
       unsigned char arrayActive;
};
//=====================================================


#endif
